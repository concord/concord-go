// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bolt

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type BackPressure int64

const (
	BackPressure_NONE         BackPressure = 0
	BackPressure_ENQUEUE      BackPressure = 1
	BackPressure_DROP_HEAD    BackPressure = 2
	BackPressure_DROP_TAIL    BackPressure = 3
	BackPressure_BLOCK_SENDER BackPressure = 4
)

func (p BackPressure) String() string {
	switch p {
	case BackPressure_NONE:
		return "BackPressure_NONE"
	case BackPressure_ENQUEUE:
		return "BackPressure_ENQUEUE"
	case BackPressure_DROP_HEAD:
		return "BackPressure_DROP_HEAD"
	case BackPressure_DROP_TAIL:
		return "BackPressure_DROP_TAIL"
	case BackPressure_BLOCK_SENDER:
		return "BackPressure_BLOCK_SENDER"
	}
	return "<UNSET>"
}

func BackPressureFromString(s string) (BackPressure, error) {
	switch s {
	case "BackPressure_NONE":
		return BackPressure_NONE, nil
	case "BackPressure_ENQUEUE":
		return BackPressure_ENQUEUE, nil
	case "BackPressure_DROP_HEAD":
		return BackPressure_DROP_HEAD, nil
	case "BackPressure_DROP_TAIL":
		return BackPressure_DROP_TAIL, nil
	case "BackPressure_BLOCK_SENDER":
		return BackPressure_BLOCK_SENDER, nil
	}
	return BackPressure(0), fmt.Errorf("not a valid BackPressure string")
}

func BackPressurePtr(v BackPressure) *BackPressure { return &v }

type StreamGrouping int64

const (
	StreamGrouping_ROUND_ROBIN StreamGrouping = 0
	StreamGrouping_SHUFFLE     StreamGrouping = 1
	StreamGrouping_GROUP_BY    StreamGrouping = 2
	StreamGrouping_LOCAL       StreamGrouping = 3
	StreamGrouping_CUSTOM      StreamGrouping = 100
)

func (p StreamGrouping) String() string {
	switch p {
	case StreamGrouping_ROUND_ROBIN:
		return "StreamGrouping_ROUND_ROBIN"
	case StreamGrouping_SHUFFLE:
		return "StreamGrouping_SHUFFLE"
	case StreamGrouping_GROUP_BY:
		return "StreamGrouping_GROUP_BY"
	case StreamGrouping_LOCAL:
		return "StreamGrouping_LOCAL"
	case StreamGrouping_CUSTOM:
		return "StreamGrouping_CUSTOM"
	}
	return "<UNSET>"
}

func StreamGroupingFromString(s string) (StreamGrouping, error) {
	switch s {
	case "StreamGrouping_ROUND_ROBIN":
		return StreamGrouping_ROUND_ROBIN, nil
	case "StreamGrouping_SHUFFLE":
		return StreamGrouping_SHUFFLE, nil
	case "StreamGrouping_GROUP_BY":
		return StreamGrouping_GROUP_BY, nil
	case "StreamGrouping_LOCAL":
		return StreamGrouping_LOCAL, nil
	case "StreamGrouping_CUSTOM":
		return StreamGrouping_CUSTOM, nil
	}
	return StreamGrouping(0), fmt.Errorf("not a valid StreamGrouping string")
}

func StreamGroupingPtr(v StreamGrouping) *StreamGrouping { return &v }

type Signal int64

const (
	Signal_START    Signal = 0
	Signal_ACTIVE   Signal = 1
	Signal_INACTIVE Signal = 2
	Signal_SHUTDOWN Signal = 3
	Signal_KILL     Signal = 4
)

func (p Signal) String() string {
	switch p {
	case Signal_START:
		return "Signal_START"
	case Signal_ACTIVE:
		return "Signal_ACTIVE"
	case Signal_INACTIVE:
		return "Signal_INACTIVE"
	case Signal_SHUTDOWN:
		return "Signal_SHUTDOWN"
	case Signal_KILL:
		return "Signal_KILL"
	}
	return "<UNSET>"
}

func SignalFromString(s string) (Signal, error) {
	switch s {
	case "Signal_START":
		return Signal_START, nil
	case "Signal_ACTIVE":
		return Signal_ACTIVE, nil
	case "Signal_INACTIVE":
		return Signal_INACTIVE, nil
	case "Signal_SHUTDOWN":
		return Signal_SHUTDOWN, nil
	case "Signal_KILL":
		return Signal_KILL, nil
	}
	return Signal(0), fmt.Errorf("not a valid Signal string")
}

func SignalPtr(v Signal) *Signal { return &v }

type RecordFlags int64

const (
	RecordFlags_CLIENT_RECORD    RecordFlags = 1
	RecordFlags_FRAMEWORK_RECORD RecordFlags = 2
)

func (p RecordFlags) String() string {
	switch p {
	case RecordFlags_CLIENT_RECORD:
		return "RecordFlags_CLIENT_RECORD"
	case RecordFlags_FRAMEWORK_RECORD:
		return "RecordFlags_FRAMEWORK_RECORD"
	}
	return "<UNSET>"
}

func RecordFlagsFromString(s string) (RecordFlags, error) {
	switch s {
	case "RecordFlags_CLIENT_RECORD":
		return RecordFlags_CLIENT_RECORD, nil
	case "RecordFlags_FRAMEWORK_RECORD":
		return RecordFlags_FRAMEWORK_RECORD, nil
	}
	return RecordFlags(0), fmt.Errorf("not a valid RecordFlags string")
}

func RecordFlagsPtr(v RecordFlags) *RecordFlags { return &v }

type BoltError struct {
	Reason  string `thrift:"reason,1" json:"reason"`
	Context string `thrift:"context,2" json:"context"`
	Time    int64  `thrift:"time,3" json:"time"`
}

func NewBoltError() *BoltError {
	return &BoltError{}
}

func (p *BoltError) GetReason() string {
	return p.Reason
}

func (p *BoltError) GetContext() string {
	return p.Context
}

func (p *BoltError) GetTime() int64 {
	return p.Time
}
func (p *BoltError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BoltError) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Reason = v
	}
	return nil
}

func (p *BoltError) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Context = v
	}
	return nil
}

func (p *BoltError) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *BoltError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BoltError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BoltError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:reason: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Reason)); err != nil {
		return fmt.Errorf("%T.reason (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:reason: %s", p, err)
	}
	return err
}

func (p *BoltError) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("context", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:context: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Context)); err != nil {
		return fmt.Errorf("%T.context (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:context: %s", p, err)
	}
	return err
}

func (p *BoltError) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("time", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Time)); err != nil {
		return fmt.Errorf("%T.time (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:time: %s", p, err)
	}
	return err
}

func (p *BoltError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BoltError(%+v)", *p)
}

func (p *BoltError) Error() string {
	return p.String()
}

type Endpoint struct {
	Ip   string `thrift:"ip,1" json:"ip"`
	Port int16  `thrift:"port,2" json:"port"`
}

func NewEndpoint() *Endpoint {
	return &Endpoint{}
}

func (p *Endpoint) GetIp() string {
	return p.Ip
}

func (p *Endpoint) GetPort() int16 {
	return p.Port
}
func (p *Endpoint) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Endpoint) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Ip = v
	}
	return nil
}

func (p *Endpoint) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Port = v
	}
	return nil
}

func (p *Endpoint) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Endpoint"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Endpoint) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ip: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Ip)); err != nil {
		return fmt.Errorf("%T.ip (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ip: %s", p, err)
	}
	return err
}

func (p *Endpoint) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I16, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:port: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Port)); err != nil {
		return fmt.Errorf("%T.port (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:port: %s", p, err)
	}
	return err
}

func (p *Endpoint) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Endpoint(%+v)", *p)
}

type StreamMetadata struct {
	Name     string         `thrift:"name,1" json:"name"`
	Grouping StreamGrouping `thrift:"grouping,2" json:"grouping"`
}

func NewStreamMetadata() *StreamMetadata {
	return &StreamMetadata{
		Grouping: 1,
	}
}

func (p *StreamMetadata) GetName() string {
	return p.Name
}

func (p *StreamMetadata) GetGrouping() StreamGrouping {
	return p.Grouping
}
func (p *StreamMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StreamMetadata) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *StreamMetadata) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		temp := StreamGrouping(v)
		p.Grouping = temp
	}
	return nil
}

func (p *StreamMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StreamMetadata"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *StreamMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *StreamMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("grouping", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:grouping: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Grouping)); err != nil {
		return fmt.Errorf("%T.grouping (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:grouping: %s", p, err)
	}
	return err
}

func (p *StreamMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamMetadata(%+v)", *p)
}

type ComputationMetadata struct {
	Name          string            `thrift:"name,1" json:"name"`
	TaskId        string            `thrift:"taskId,2" json:"taskId"`
	Istreams      []*StreamMetadata `thrift:"istreams,3" json:"istreams"`
	Ostreams      []string          `thrift:"ostreams,4" json:"ostreams"`
	ProxyEndpoint *Endpoint         `thrift:"proxyEndpoint,5" json:"proxyEndpoint"`
}

func NewComputationMetadata() *ComputationMetadata {
	return &ComputationMetadata{}
}

func (p *ComputationMetadata) GetName() string {
	return p.Name
}

func (p *ComputationMetadata) GetTaskId() string {
	return p.TaskId
}

func (p *ComputationMetadata) GetIstreams() []*StreamMetadata {
	return p.Istreams
}

func (p *ComputationMetadata) GetOstreams() []string {
	return p.Ostreams
}

var ComputationMetadata_ProxyEndpoint_DEFAULT *Endpoint

func (p *ComputationMetadata) GetProxyEndpoint() *Endpoint {
	if !p.IsSetProxyEndpoint() {
		return ComputationMetadata_ProxyEndpoint_DEFAULT
	}
	return p.ProxyEndpoint
}
func (p *ComputationMetadata) IsSetProxyEndpoint() bool {
	return p.ProxyEndpoint != nil
}

func (p *ComputationMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ComputationMetadata) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *ComputationMetadata) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *ComputationMetadata) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*StreamMetadata, 0, size)
	p.Istreams = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &StreamMetadata{
			Grouping: 1,
		}
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0, err)
		}
		p.Istreams = append(p.Istreams, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ComputationMetadata) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Ostreams = tSlice
	for i := 0; i < size; i++ {
		var _elem1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem1 = v
		}
		p.Ostreams = append(p.Ostreams, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ComputationMetadata) ReadField5(iprot thrift.TProtocol) error {
	p.ProxyEndpoint = &Endpoint{}
	if err := p.ProxyEndpoint.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.ProxyEndpoint, err)
	}
	return nil
}

func (p *ComputationMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComputationMetadata"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ComputationMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *ComputationMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:taskId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return fmt.Errorf("%T.taskId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:taskId: %s", p, err)
	}
	return err
}

func (p *ComputationMetadata) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("istreams", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:istreams: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Istreams)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Istreams {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:istreams: %s", p, err)
	}
	return err
}

func (p *ComputationMetadata) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ostreams", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ostreams: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Ostreams)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Ostreams {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ostreams: %s", p, err)
	}
	return err
}

func (p *ComputationMetadata) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("proxyEndpoint", thrift.STRUCT, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:proxyEndpoint: %s", p, err)
	}
	if err := p.ProxyEndpoint.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.ProxyEndpoint, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:proxyEndpoint: %s", p, err)
	}
	return err
}

func (p *ComputationMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComputationMetadata(%+v)", *p)
}

type ExecutorTaskInfoHelper struct {
	FrameworkLoggingLevel int32     `thrift:"frameworkLoggingLevel,1" json:"frameworkLoggingLevel"`
	User                  string    `thrift:"user,2" json:"user"`
	FrameworkVModule      string    `thrift:"frameworkVModule,3" json:"frameworkVModule"`
	Scheduler             *Endpoint `thrift:"scheduler,4" json:"scheduler"`
	Proxy                 *Endpoint `thrift:"proxy,5" json:"proxy"`
	Client                *Endpoint `thrift:"client,6" json:"client"`
	TraceAggregator       *Endpoint `thrift:"traceAggregator,7" json:"traceAggregator"`
	ExecName              string    `thrift:"execName,8" json:"execName"`
	Folder                string    `thrift:"folder,9" json:"folder"`
	ComputationAliasName  string    `thrift:"computationAliasName,10" json:"computationAliasName"`
	ClientArguments       []string  `thrift:"clientArguments,11" json:"clientArguments"`
	EnvironmentExtra      []string  `thrift:"environmentExtra,12" json:"environmentExtra"`
	DockerContainer       string    `thrift:"dockerContainer,13" json:"dockerContainer"`
}

func NewExecutorTaskInfoHelper() *ExecutorTaskInfoHelper {
	return &ExecutorTaskInfoHelper{
		FrameworkLoggingLevel: 1,
	}
}

func (p *ExecutorTaskInfoHelper) GetFrameworkLoggingLevel() int32 {
	return p.FrameworkLoggingLevel
}

func (p *ExecutorTaskInfoHelper) GetUser() string {
	return p.User
}

func (p *ExecutorTaskInfoHelper) GetFrameworkVModule() string {
	return p.FrameworkVModule
}

var ExecutorTaskInfoHelper_Scheduler_DEFAULT *Endpoint

func (p *ExecutorTaskInfoHelper) GetScheduler() *Endpoint {
	if !p.IsSetScheduler() {
		return ExecutorTaskInfoHelper_Scheduler_DEFAULT
	}
	return p.Scheduler
}

var ExecutorTaskInfoHelper_Proxy_DEFAULT *Endpoint

func (p *ExecutorTaskInfoHelper) GetProxy() *Endpoint {
	if !p.IsSetProxy() {
		return ExecutorTaskInfoHelper_Proxy_DEFAULT
	}
	return p.Proxy
}

var ExecutorTaskInfoHelper_Client_DEFAULT *Endpoint

func (p *ExecutorTaskInfoHelper) GetClient() *Endpoint {
	if !p.IsSetClient() {
		return ExecutorTaskInfoHelper_Client_DEFAULT
	}
	return p.Client
}

var ExecutorTaskInfoHelper_TraceAggregator_DEFAULT *Endpoint

func (p *ExecutorTaskInfoHelper) GetTraceAggregator() *Endpoint {
	if !p.IsSetTraceAggregator() {
		return ExecutorTaskInfoHelper_TraceAggregator_DEFAULT
	}
	return p.TraceAggregator
}

func (p *ExecutorTaskInfoHelper) GetExecName() string {
	return p.ExecName
}

func (p *ExecutorTaskInfoHelper) GetFolder() string {
	return p.Folder
}

func (p *ExecutorTaskInfoHelper) GetComputationAliasName() string {
	return p.ComputationAliasName
}

func (p *ExecutorTaskInfoHelper) GetClientArguments() []string {
	return p.ClientArguments
}

func (p *ExecutorTaskInfoHelper) GetEnvironmentExtra() []string {
	return p.EnvironmentExtra
}

func (p *ExecutorTaskInfoHelper) GetDockerContainer() string {
	return p.DockerContainer
}
func (p *ExecutorTaskInfoHelper) IsSetScheduler() bool {
	return p.Scheduler != nil
}

func (p *ExecutorTaskInfoHelper) IsSetProxy() bool {
	return p.Proxy != nil
}

func (p *ExecutorTaskInfoHelper) IsSetClient() bool {
	return p.Client != nil
}

func (p *ExecutorTaskInfoHelper) IsSetTraceAggregator() bool {
	return p.TraceAggregator != nil
}

func (p *ExecutorTaskInfoHelper) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.ReadField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.ReadField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.ReadField11(iprot); err != nil {
				return err
			}
		case 12:
			if err := p.ReadField12(iprot); err != nil {
				return err
			}
		case 13:
			if err := p.ReadField13(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.FrameworkLoggingLevel = v
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FrameworkVModule = v
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField4(iprot thrift.TProtocol) error {
	p.Scheduler = &Endpoint{}
	if err := p.Scheduler.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Scheduler, err)
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField5(iprot thrift.TProtocol) error {
	p.Proxy = &Endpoint{}
	if err := p.Proxy.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Proxy, err)
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField6(iprot thrift.TProtocol) error {
	p.Client = &Endpoint{}
	if err := p.Client.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Client, err)
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField7(iprot thrift.TProtocol) error {
	p.TraceAggregator = &Endpoint{}
	if err := p.TraceAggregator.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TraceAggregator, err)
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.ExecName = v
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 9: %s", err)
	} else {
		p.Folder = v
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 10: %s", err)
	} else {
		p.ComputationAliasName = v
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.ClientArguments = tSlice
	for i := 0; i < size; i++ {
		var _elem2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem2 = v
		}
		p.ClientArguments = append(p.ClientArguments, _elem2)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.EnvironmentExtra = tSlice
	for i := 0; i < size; i++ {
		var _elem3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem3 = v
		}
		p.EnvironmentExtra = append(p.EnvironmentExtra, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 13: %s", err)
	} else {
		p.DockerContainer = v
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ExecutorTaskInfoHelper"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := p.writeField12(oprot); err != nil {
		return err
	}
	if err := p.writeField13(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ExecutorTaskInfoHelper) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("frameworkLoggingLevel", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:frameworkLoggingLevel: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.FrameworkLoggingLevel)); err != nil {
		return fmt.Errorf("%T.frameworkLoggingLevel (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:frameworkLoggingLevel: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:user: %s", p, err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return fmt.Errorf("%T.user (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:user: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("frameworkVModule", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:frameworkVModule: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FrameworkVModule)); err != nil {
		return fmt.Errorf("%T.frameworkVModule (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:frameworkVModule: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scheduler", thrift.STRUCT, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:scheduler: %s", p, err)
	}
	if err := p.Scheduler.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Scheduler, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:scheduler: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("proxy", thrift.STRUCT, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:proxy: %s", p, err)
	}
	if err := p.Proxy.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Proxy, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:proxy: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("client", thrift.STRUCT, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:client: %s", p, err)
	}
	if err := p.Client.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Client, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:client: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("traceAggregator", thrift.STRUCT, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:traceAggregator: %s", p, err)
	}
	if err := p.TraceAggregator.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TraceAggregator, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:traceAggregator: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("execName", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:execName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ExecName)); err != nil {
		return fmt.Errorf("%T.execName (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:execName: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("folder", thrift.STRING, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:folder: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Folder)); err != nil {
		return fmt.Errorf("%T.folder (9) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:folder: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("computationAliasName", thrift.STRING, 10); err != nil {
		return fmt.Errorf("%T write field begin error 10:computationAliasName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ComputationAliasName)); err != nil {
		return fmt.Errorf("%T.computationAliasName (10) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 10:computationAliasName: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("clientArguments", thrift.LIST, 11); err != nil {
		return fmt.Errorf("%T write field begin error 11:clientArguments: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.ClientArguments)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.ClientArguments {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 11:clientArguments: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField12(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("environmentExtra", thrift.LIST, 12); err != nil {
		return fmt.Errorf("%T write field begin error 12:environmentExtra: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.EnvironmentExtra)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.EnvironmentExtra {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 12:environmentExtra: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) writeField13(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("dockerContainer", thrift.STRING, 13); err != nil {
		return fmt.Errorf("%T write field begin error 13:dockerContainer: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DockerContainer)); err != nil {
		return fmt.Errorf("%T.dockerContainer (13) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 13:dockerContainer: %s", p, err)
	}
	return err
}

func (p *ExecutorTaskInfoHelper) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecutorTaskInfoHelper(%+v)", *p)
}

type PhysicalComputationMetadata struct {
	TaskId              string                  `thrift:"taskId,1" json:"taskId"`
	SlaveId             string                  `thrift:"slaveId,2" json:"slaveId"`
	Cpus                float64                 `thrift:"cpus,3" json:"cpus"`
	Mem                 int32                   `thrift:"mem,4" json:"mem"`
	Disk                int32                   `thrift:"disk,5" json:"disk"`
	TaskHelper          *ExecutorTaskInfoHelper `thrift:"taskHelper,6" json:"taskHelper"`
	NeedsReconciliation bool                    `thrift:"needsReconciliation,7" json:"needsReconciliation"`
}

func NewPhysicalComputationMetadata() *PhysicalComputationMetadata {
	return &PhysicalComputationMetadata{}
}

func (p *PhysicalComputationMetadata) GetTaskId() string {
	return p.TaskId
}

func (p *PhysicalComputationMetadata) GetSlaveId() string {
	return p.SlaveId
}

func (p *PhysicalComputationMetadata) GetCpus() float64 {
	return p.Cpus
}

func (p *PhysicalComputationMetadata) GetMem() int32 {
	return p.Mem
}

func (p *PhysicalComputationMetadata) GetDisk() int32 {
	return p.Disk
}

var PhysicalComputationMetadata_TaskHelper_DEFAULT *ExecutorTaskInfoHelper

func (p *PhysicalComputationMetadata) GetTaskHelper() *ExecutorTaskInfoHelper {
	if !p.IsSetTaskHelper() {
		return PhysicalComputationMetadata_TaskHelper_DEFAULT
	}
	return p.TaskHelper
}

func (p *PhysicalComputationMetadata) GetNeedsReconciliation() bool {
	return p.NeedsReconciliation
}
func (p *PhysicalComputationMetadata) IsSetTaskHelper() bool {
	return p.TaskHelper != nil
}

func (p *PhysicalComputationMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PhysicalComputationMetadata) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *PhysicalComputationMetadata) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SlaveId = v
	}
	return nil
}

func (p *PhysicalComputationMetadata) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Cpus = v
	}
	return nil
}

func (p *PhysicalComputationMetadata) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Mem = v
	}
	return nil
}

func (p *PhysicalComputationMetadata) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Disk = v
	}
	return nil
}

func (p *PhysicalComputationMetadata) ReadField6(iprot thrift.TProtocol) error {
	p.TaskHelper = &ExecutorTaskInfoHelper{
		FrameworkLoggingLevel: 1,
	}
	if err := p.TaskHelper.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TaskHelper, err)
	}
	return nil
}

func (p *PhysicalComputationMetadata) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.NeedsReconciliation = v
	}
	return nil
}

func (p *PhysicalComputationMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PhysicalComputationMetadata"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PhysicalComputationMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:taskId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return fmt.Errorf("%T.taskId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:taskId: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("slaveId", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:slaveId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SlaveId)); err != nil {
		return fmt.Errorf("%T.slaveId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:slaveId: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationMetadata) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cpus", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:cpus: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Cpus)); err != nil {
		return fmt.Errorf("%T.cpus (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:cpus: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationMetadata) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mem", thrift.I32, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:mem: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Mem)); err != nil {
		return fmt.Errorf("%T.mem (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:mem: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationMetadata) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("disk", thrift.I32, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:disk: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Disk)); err != nil {
		return fmt.Errorf("%T.disk (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:disk: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationMetadata) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskHelper", thrift.STRUCT, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:taskHelper: %s", p, err)
	}
	if err := p.TaskHelper.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TaskHelper, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:taskHelper: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationMetadata) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("needsReconciliation", thrift.BOOL, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:needsReconciliation: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.NeedsReconciliation)); err != nil {
		return fmt.Errorf("%T.needsReconciliation (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:needsReconciliation: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PhysicalComputationMetadata(%+v)", *p)
}

type PhysicalComputationLayout struct {
	Name     string                         `thrift:"name,1" json:"name"`
	Istreams []*StreamMetadata              `thrift:"istreams,2" json:"istreams"`
	Ostreams []string                       `thrift:"ostreams,3" json:"ostreams"`
	Nodes    []*PhysicalComputationMetadata `thrift:"nodes,4" json:"nodes"`
}

func NewPhysicalComputationLayout() *PhysicalComputationLayout {
	return &PhysicalComputationLayout{}
}

func (p *PhysicalComputationLayout) GetName() string {
	return p.Name
}

func (p *PhysicalComputationLayout) GetIstreams() []*StreamMetadata {
	return p.Istreams
}

func (p *PhysicalComputationLayout) GetOstreams() []string {
	return p.Ostreams
}

func (p *PhysicalComputationLayout) GetNodes() []*PhysicalComputationMetadata {
	return p.Nodes
}
func (p *PhysicalComputationLayout) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *PhysicalComputationLayout) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *PhysicalComputationLayout) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*StreamMetadata, 0, size)
	p.Istreams = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &StreamMetadata{
			Grouping: 1,
		}
		if err := _elem4.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem4, err)
		}
		p.Istreams = append(p.Istreams, _elem4)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PhysicalComputationLayout) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]string, 0, size)
	p.Ostreams = tSlice
	for i := 0; i < size; i++ {
		var _elem5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_elem5 = v
		}
		p.Ostreams = append(p.Ostreams, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PhysicalComputationLayout) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*PhysicalComputationMetadata, 0, size)
	p.Nodes = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &PhysicalComputationMetadata{}
		if err := _elem6.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem6, err)
		}
		p.Nodes = append(p.Nodes, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *PhysicalComputationLayout) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("PhysicalComputationLayout"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *PhysicalComputationLayout) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationLayout) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("istreams", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:istreams: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Istreams)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Istreams {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:istreams: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationLayout) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ostreams", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ostreams: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Ostreams)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Ostreams {
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ostreams: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationLayout) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("nodes", thrift.LIST, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:nodes: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Nodes)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Nodes {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:nodes: %s", p, err)
	}
	return err
}

func (p *PhysicalComputationLayout) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PhysicalComputationLayout(%+v)", *p)
}

type SchedulerMetadata struct {
	Endpoint *Endpoint `thrift:"endpoint,1" json:"endpoint"`
	Version  int32     `thrift:"version,2" json:"version"`
}

func NewSchedulerMetadata() *SchedulerMetadata {
	return &SchedulerMetadata{}
}

var SchedulerMetadata_Endpoint_DEFAULT *Endpoint

func (p *SchedulerMetadata) GetEndpoint() *Endpoint {
	if !p.IsSetEndpoint() {
		return SchedulerMetadata_Endpoint_DEFAULT
	}
	return p.Endpoint
}

func (p *SchedulerMetadata) GetVersion() int32 {
	return p.Version
}
func (p *SchedulerMetadata) IsSetEndpoint() bool {
	return p.Endpoint != nil
}

func (p *SchedulerMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *SchedulerMetadata) ReadField1(iprot thrift.TProtocol) error {
	p.Endpoint = &Endpoint{}
	if err := p.Endpoint.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Endpoint, err)
	}
	return nil
}

func (p *SchedulerMetadata) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *SchedulerMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SchedulerMetadata"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *SchedulerMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endpoint", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:endpoint: %s", p, err)
	}
	if err := p.Endpoint.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Endpoint, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:endpoint: %s", p, err)
	}
	return err
}

func (p *SchedulerMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:version: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return fmt.Errorf("%T.version (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:version: %s", p, err)
	}
	return err
}

func (p *SchedulerMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SchedulerMetadata(%+v)", *p)
}

type TopologyMetadata struct {
	Version      int32                                 `thrift:"version,1" json:"version"`
	Computations map[string]*PhysicalComputationLayout `thrift:"computations,2" json:"computations"`
	FrameworkID  string                                `thrift:"frameworkID,3" json:"frameworkID"`
}

func NewTopologyMetadata() *TopologyMetadata {
	return &TopologyMetadata{}
}

func (p *TopologyMetadata) GetVersion() int32 {
	return p.Version
}

func (p *TopologyMetadata) GetComputations() map[string]*PhysicalComputationLayout {
	return p.Computations
}

func (p *TopologyMetadata) GetFrameworkID() string {
	return p.FrameworkID
}
func (p *TopologyMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TopologyMetadata) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *TopologyMetadata) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]*PhysicalComputationLayout, size)
	p.Computations = tMap
	for i := 0; i < size; i++ {
		var _key7 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key7 = v
		}
		_val8 := &PhysicalComputationLayout{}
		if err := _val8.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val8, err)
		}
		p.Computations[_key7] = _val8
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *TopologyMetadata) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.FrameworkID = v
	}
	return nil
}

func (p *TopologyMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TopologyMetadata"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *TopologyMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:version: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Version)); err != nil {
		return fmt.Errorf("%T.version (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:version: %s", p, err)
	}
	return err
}

func (p *TopologyMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("computations", thrift.MAP, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:computations: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Computations)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Computations {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:computations: %s", p, err)
	}
	return err
}

func (p *TopologyMetadata) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("frameworkID", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:frameworkID: %s", p, err)
	}
	if err := oprot.WriteString(string(p.FrameworkID)); err != nil {
		return fmt.Errorf("%T.frameworkID (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:frameworkID: %s", p, err)
	}
	return err
}

func (p *TopologyMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TopologyMetadata(%+v)", *p)
}

type RecordMetadata struct {
	TraceId      int64 `thrift:"traceId,1" json:"traceId"`
	SourceSpanId int64 `thrift:"sourceSpanId,2" json:"sourceSpanId"`
	Flags        int32 `thrift:"flags,3" json:"flags"`
	Stream       int64 `thrift:"stream,4" json:"stream"`
	Timestamp    int64 `thrift:"timestamp,5" json:"timestamp"`
}

func NewRecordMetadata() *RecordMetadata {
	return &RecordMetadata{}
}

func (p *RecordMetadata) GetTraceId() int64 {
	return p.TraceId
}

func (p *RecordMetadata) GetSourceSpanId() int64 {
	return p.SourceSpanId
}

func (p *RecordMetadata) GetFlags() int32 {
	return p.Flags
}

func (p *RecordMetadata) GetStream() int64 {
	return p.Stream
}

func (p *RecordMetadata) GetTimestamp() int64 {
	return p.Timestamp
}
func (p *RecordMetadata) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RecordMetadata) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TraceId = v
	}
	return nil
}

func (p *RecordMetadata) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SourceSpanId = v
	}
	return nil
}

func (p *RecordMetadata) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Flags = v
	}
	return nil
}

func (p *RecordMetadata) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Stream = v
	}
	return nil
}

func (p *RecordMetadata) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *RecordMetadata) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RecordMetadata"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RecordMetadata) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("traceId", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:traceId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.TraceId)); err != nil {
		return fmt.Errorf("%T.traceId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:traceId: %s", p, err)
	}
	return err
}

func (p *RecordMetadata) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sourceSpanId", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sourceSpanId: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.SourceSpanId)); err != nil {
		return fmt.Errorf("%T.sourceSpanId (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sourceSpanId: %s", p, err)
	}
	return err
}

func (p *RecordMetadata) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flags", thrift.I32, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:flags: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Flags)); err != nil {
		return fmt.Errorf("%T.flags (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:flags: %s", p, err)
	}
	return err
}

func (p *RecordMetadata) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stream", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:stream: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Stream)); err != nil {
		return fmt.Errorf("%T.stream (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:stream: %s", p, err)
	}
	return err
}

func (p *RecordMetadata) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.timestamp (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:timestamp: %s", p, err)
	}
	return err
}

func (p *RecordMetadata) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RecordMetadata(%+v)", *p)
}

type Record struct {
	Meta       *RecordMetadata `thrift:"meta,1" json:"meta"`
	Time       int64           `thrift:"time,2" json:"time"`
	Key        []byte          `thrift:"key,3" json:"key"`
	Data       []byte          `thrift:"data,4" json:"data"`
	UserStream []byte          `thrift:"userStream,5" json:"userStream"`
}

func NewRecord() *Record {
	return &Record{}
}

var Record_Meta_DEFAULT *RecordMetadata

func (p *Record) GetMeta() *RecordMetadata {
	if !p.IsSetMeta() {
		return Record_Meta_DEFAULT
	}
	return p.Meta
}

func (p *Record) GetTime() int64 {
	return p.Time
}

func (p *Record) GetKey() []byte {
	return p.Key
}

func (p *Record) GetData() []byte {
	return p.Data
}

func (p *Record) GetUserStream() []byte {
	return p.UserStream
}
func (p *Record) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *Record) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Record) ReadField1(iprot thrift.TProtocol) error {
	p.Meta = &RecordMetadata{}
	if err := p.Meta.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Meta, err)
	}
	return nil
}

func (p *Record) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Time = v
	}
	return nil
}

func (p *Record) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *Record) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Data = v
	}
	return nil
}

func (p *Record) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.UserStream = v
	}
	return nil
}

func (p *Record) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Record"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Record) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:meta: %s", p, err)
	}
	if err := p.Meta.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Meta, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:meta: %s", p, err)
	}
	return err
}

func (p *Record) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("time", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:time: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Time)); err != nil {
		return fmt.Errorf("%T.time (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:time: %s", p, err)
	}
	return err
}

func (p *Record) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:key: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Key); err != nil {
		return fmt.Errorf("%T.key (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:key: %s", p, err)
	}
	return err
}

func (p *Record) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("data", thrift.STRING, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:data: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Data); err != nil {
		return fmt.Errorf("%T.data (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:data: %s", p, err)
	}
	return err
}

func (p *Record) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userStream", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:userStream: %s", p, err)
	}
	if err := oprot.WriteBinary(p.UserStream); err != nil {
		return fmt.Errorf("%T.userStream (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:userStream: %s", p, err)
	}
	return err
}

func (p *Record) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Record(%+v)", *p)
}

type ComputationTx struct {
	Id      int64            `thrift:"id,1" json:"id"`
	Records []*Record        `thrift:"records,2" json:"records"`
	Timers  map[string]int64 `thrift:"timers,3" json:"timers"`
}

func NewComputationTx() *ComputationTx {
	return &ComputationTx{}
}

func (p *ComputationTx) GetId() int64 {
	return p.Id
}

func (p *ComputationTx) GetRecords() []*Record {
	return p.Records
}

func (p *ComputationTx) GetTimers() map[string]int64 {
	return p.Timers
}
func (p *ComputationTx) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ComputationTx) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Id = v
	}
	return nil
}

func (p *ComputationTx) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Record, 0, size)
	p.Records = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &Record{}
		if err := _elem9.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem9, err)
		}
		p.Records = append(p.Records, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *ComputationTx) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]int64, size)
	p.Timers = tMap
	for i := 0; i < size; i++ {
		var _key10 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key10 = v
		}
		var _val11 int64
		if v, err := iprot.ReadI64(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val11 = v
		}
		p.Timers[_key10] = _val11
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *ComputationTx) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ComputationTx"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ComputationTx) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.id (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:id: %s", p, err)
	}
	return err
}

func (p *ComputationTx) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("records", thrift.LIST, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:records: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Records)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Records {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:records: %s", p, err)
	}
	return err
}

func (p *ComputationTx) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timers", thrift.MAP, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:timers: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.Timers)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Timers {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:timers: %s", p, err)
	}
	return err
}

func (p *ComputationTx) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ComputationTx(%+v)", *p)
}

type RichStream struct {
	Stream          *StreamMetadata `thrift:"stream,1" json:"stream"`
	ComputationName string          `thrift:"computationName,2" json:"computationName"`
	Endpoints       []*Endpoint     `thrift:"endpoints,3" json:"endpoints"`
}

func NewRichStream() *RichStream {
	return &RichStream{}
}

var RichStream_Stream_DEFAULT *StreamMetadata

func (p *RichStream) GetStream() *StreamMetadata {
	if !p.IsSetStream() {
		return RichStream_Stream_DEFAULT
	}
	return p.Stream
}

func (p *RichStream) GetComputationName() string {
	return p.ComputationName
}

func (p *RichStream) GetEndpoints() []*Endpoint {
	return p.Endpoints
}
func (p *RichStream) IsSetStream() bool {
	return p.Stream != nil
}

func (p *RichStream) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RichStream) ReadField1(iprot thrift.TProtocol) error {
	p.Stream = &StreamMetadata{
		Grouping: 1,
	}
	if err := p.Stream.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Stream, err)
	}
	return nil
}

func (p *RichStream) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.ComputationName = v
	}
	return nil
}

func (p *RichStream) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list begin: %s", err)
	}
	tSlice := make([]*Endpoint, 0, size)
	p.Endpoints = tSlice
	for i := 0; i < size; i++ {
		_elem12 := &Endpoint{}
		if err := _elem12.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem12, err)
		}
		p.Endpoints = append(p.Endpoints, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s", err)
	}
	return nil
}

func (p *RichStream) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("RichStream"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RichStream) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stream", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:stream: %s", p, err)
	}
	if err := p.Stream.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Stream, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:stream: %s", p, err)
	}
	return err
}

func (p *RichStream) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("computationName", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:computationName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ComputationName)); err != nil {
		return fmt.Errorf("%T.computationName (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:computationName: %s", p, err)
	}
	return err
}

func (p *RichStream) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endpoints", thrift.LIST, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:endpoints: %s", p, err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Endpoints)); err != nil {
		return fmt.Errorf("error writing list begin: %s", err)
	}
	for _, v := range p.Endpoints {
		if err := v.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", v, err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return fmt.Errorf("error writing list end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:endpoints: %s", p, err)
	}
	return err
}

func (p *RichStream) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RichStream(%+v)", *p)
}

type BoltComputationRequest struct {
	Name              string                  `thrift:"name,1" json:"name"`
	Instances         int64                   `thrift:"instances,2" json:"instances"`
	Cpus              float64                 `thrift:"cpus,3" json:"cpus"`
	Mem               int64                   `thrift:"mem,4" json:"mem"`
	Disk              int64                   `thrift:"disk,5" json:"disk"`
	TaskHelper        *ExecutorTaskInfoHelper `thrift:"taskHelper,6" json:"taskHelper"`
	ForceUpdateBinary bool                    `thrift:"forceUpdateBinary,7" json:"forceUpdateBinary"`
	Slug              []byte                  `thrift:"slug,8" json:"slug"`
}

func NewBoltComputationRequest() *BoltComputationRequest {
	return &BoltComputationRequest{
		Instances: 1,

		Cpus: 0.1,

		Mem: 2048,

		Disk: 10240,
	}
}

func (p *BoltComputationRequest) GetName() string {
	return p.Name
}

func (p *BoltComputationRequest) GetInstances() int64 {
	return p.Instances
}

func (p *BoltComputationRequest) GetCpus() float64 {
	return p.Cpus
}

func (p *BoltComputationRequest) GetMem() int64 {
	return p.Mem
}

func (p *BoltComputationRequest) GetDisk() int64 {
	return p.Disk
}

var BoltComputationRequest_TaskHelper_DEFAULT *ExecutorTaskInfoHelper

func (p *BoltComputationRequest) GetTaskHelper() *ExecutorTaskInfoHelper {
	if !p.IsSetTaskHelper() {
		return BoltComputationRequest_TaskHelper_DEFAULT
	}
	return p.TaskHelper
}

func (p *BoltComputationRequest) GetForceUpdateBinary() bool {
	return p.ForceUpdateBinary
}

func (p *BoltComputationRequest) GetSlug() []byte {
	return p.Slug
}
func (p *BoltComputationRequest) IsSetTaskHelper() bool {
	return p.TaskHelper != nil
}

func (p *BoltComputationRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.ReadField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BoltComputationRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *BoltComputationRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Instances = v
	}
	return nil
}

func (p *BoltComputationRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Cpus = v
	}
	return nil
}

func (p *BoltComputationRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s", err)
	} else {
		p.Mem = v
	}
	return nil
}

func (p *BoltComputationRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 5: %s", err)
	} else {
		p.Disk = v
	}
	return nil
}

func (p *BoltComputationRequest) ReadField6(iprot thrift.TProtocol) error {
	p.TaskHelper = &ExecutorTaskInfoHelper{
		FrameworkLoggingLevel: 1,
	}
	if err := p.TaskHelper.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.TaskHelper, err)
	}
	return nil
}

func (p *BoltComputationRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s", err)
	} else {
		p.ForceUpdateBinary = v
	}
	return nil
}

func (p *BoltComputationRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 8: %s", err)
	} else {
		p.Slug = v
	}
	return nil
}

func (p *BoltComputationRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BoltComputationRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *BoltComputationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return fmt.Errorf("%T.name (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:name: %s", p, err)
	}
	return err
}

func (p *BoltComputationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("instances", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:instances: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Instances)); err != nil {
		return fmt.Errorf("%T.instances (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:instances: %s", p, err)
	}
	return err
}

func (p *BoltComputationRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cpus", thrift.DOUBLE, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:cpus: %s", p, err)
	}
	if err := oprot.WriteDouble(float64(p.Cpus)); err != nil {
		return fmt.Errorf("%T.cpus (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:cpus: %s", p, err)
	}
	return err
}

func (p *BoltComputationRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("mem", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:mem: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Mem)); err != nil {
		return fmt.Errorf("%T.mem (4) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:mem: %s", p, err)
	}
	return err
}

func (p *BoltComputationRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("disk", thrift.I64, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:disk: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Disk)); err != nil {
		return fmt.Errorf("%T.disk (5) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:disk: %s", p, err)
	}
	return err
}

func (p *BoltComputationRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskHelper", thrift.STRUCT, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:taskHelper: %s", p, err)
	}
	if err := p.TaskHelper.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.TaskHelper, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:taskHelper: %s", p, err)
	}
	return err
}

func (p *BoltComputationRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("forceUpdateBinary", thrift.BOOL, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:forceUpdateBinary: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.ForceUpdateBinary)); err != nil {
		return fmt.Errorf("%T.forceUpdateBinary (7) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:forceUpdateBinary: %s", p, err)
	}
	return err
}

func (p *BoltComputationRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("slug", thrift.STRING, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:slug: %s", p, err)
	}
	if err := oprot.WriteBinary(p.Slug); err != nil {
		return fmt.Errorf("%T.slug (8) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:slug: %s", p, err)
	}
	return err
}

func (p *BoltComputationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BoltComputationRequest(%+v)", *p)
}
