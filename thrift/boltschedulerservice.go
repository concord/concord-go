// Autogenerated by Thrift Compiler (1.0.0-dev)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bolt

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type BoltSchedulerService interface {
	// Parameters:
	//  - Request
	DeployComputation(request *BoltComputationRequest) (err error)
	// Parameters:
	//  - ComputationName
	GetComputationSlug(computationName string) (r []byte, err error)
	// Parameters:
	//  - Computation
	RegisterComputation(computation *ComputationMetadata) (r *TopologyMetadata, err error)
	// Parameters:
	//  - ComputationName
	//  - Instances
	ScaleComputation(computationName string, instances int64) (err error)
	// Parameters:
	//  - TaskId
	KillTask(taskId string) (err error)
}

type BoltSchedulerServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewBoltSchedulerServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BoltSchedulerServiceClient {
	return &BoltSchedulerServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewBoltSchedulerServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BoltSchedulerServiceClient {
	return &BoltSchedulerServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Request
func (p *BoltSchedulerServiceClient) DeployComputation(request *BoltComputationRequest) (err error) {
	if err = p.sendDeployComputation(request); err != nil {
		return
	}
	return p.recvDeployComputation()
}

func (p *BoltSchedulerServiceClient) sendDeployComputation(request *BoltComputationRequest) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deployComputation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := DeployComputationArgs{
		Request: request,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BoltSchedulerServiceClient) recvDeployComputation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error86 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error87 error
		error87, err = error86.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error87
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deployComputation failed: out of sequence response")
		return
	}
	result := DeployComputationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - ComputationName
func (p *BoltSchedulerServiceClient) GetComputationSlug(computationName string) (r []byte, err error) {
	if err = p.sendGetComputationSlug(computationName); err != nil {
		return
	}
	return p.recvGetComputationSlug()
}

func (p *BoltSchedulerServiceClient) sendGetComputationSlug(computationName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getComputationSlug", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := GetComputationSlugArgs{
		ComputationName: computationName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BoltSchedulerServiceClient) recvGetComputationSlug() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error88 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error89 error
		error89, err = error88.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error89
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getComputationSlug failed: out of sequence response")
		return
	}
	result := GetComputationSlugResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Computation
func (p *BoltSchedulerServiceClient) RegisterComputation(computation *ComputationMetadata) (r *TopologyMetadata, err error) {
	if err = p.sendRegisterComputation(computation); err != nil {
		return
	}
	return p.recvRegisterComputation()
}

func (p *BoltSchedulerServiceClient) sendRegisterComputation(computation *ComputationMetadata) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerComputation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := RegisterComputationArgs{
		Computation: computation,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BoltSchedulerServiceClient) recvRegisterComputation() (value *TopologyMetadata, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error90 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error91 error
		error91, err = error90.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error91
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "registerComputation failed: out of sequence response")
		return
	}
	result := RegisterComputationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ComputationName
//  - Instances
func (p *BoltSchedulerServiceClient) ScaleComputation(computationName string, instances int64) (err error) {
	if err = p.sendScaleComputation(computationName, instances); err != nil {
		return
	}
	return p.recvScaleComputation()
}

func (p *BoltSchedulerServiceClient) sendScaleComputation(computationName string, instances int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("scaleComputation", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ScaleComputationArgs{
		ComputationName: computationName,
		Instances:       instances,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BoltSchedulerServiceClient) recvScaleComputation() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error92 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error93 error
		error93, err = error92.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error93
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "scaleComputation failed: out of sequence response")
		return
	}
	result := ScaleComputationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - TaskId
func (p *BoltSchedulerServiceClient) KillTask(taskId string) (err error) {
	if err = p.sendKillTask(taskId); err != nil {
		return
	}
	return p.recvKillTask()
}

func (p *BoltSchedulerServiceClient) sendKillTask(taskId string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("killTask", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := KillTaskArgs{
		TaskId: taskId,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BoltSchedulerServiceClient) recvKillTask() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "killTask failed: out of sequence response")
		return
	}
	result := KillTaskResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

type BoltSchedulerServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BoltSchedulerService
}

func (p *BoltSchedulerServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BoltSchedulerServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BoltSchedulerServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBoltSchedulerServiceProcessor(handler BoltSchedulerService) *BoltSchedulerServiceProcessor {

	self96 := &BoltSchedulerServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self96.processorMap["deployComputation"] = &boltSchedulerServiceProcessorDeployComputation{handler: handler}
	self96.processorMap["getComputationSlug"] = &boltSchedulerServiceProcessorGetComputationSlug{handler: handler}
	self96.processorMap["registerComputation"] = &boltSchedulerServiceProcessorRegisterComputation{handler: handler}
	self96.processorMap["scaleComputation"] = &boltSchedulerServiceProcessorScaleComputation{handler: handler}
	self96.processorMap["killTask"] = &boltSchedulerServiceProcessorKillTask{handler: handler}
	return self96
}

func (p *BoltSchedulerServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x97 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x97.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x97

}

type boltSchedulerServiceProcessorDeployComputation struct {
	handler BoltSchedulerService
}

func (p *boltSchedulerServiceProcessorDeployComputation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := DeployComputationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deployComputation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := DeployComputationResult{}
	var err2 error
	if err2 = p.handler.DeployComputation(args.Request); err2 != nil {
		switch v := err2.(type) {
		case *BoltError:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deployComputation: "+err2.Error())
			oprot.WriteMessageBegin("deployComputation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deployComputation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type boltSchedulerServiceProcessorGetComputationSlug struct {
	handler BoltSchedulerService
}

func (p *boltSchedulerServiceProcessorGetComputationSlug) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := GetComputationSlugArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getComputationSlug", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := GetComputationSlugResult{}
	var err2 error
	if result.Success, err2 = p.handler.GetComputationSlug(args.ComputationName); err2 != nil {
		switch v := err2.(type) {
		case *BoltError:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getComputationSlug: "+err2.Error())
			oprot.WriteMessageBegin("getComputationSlug", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("getComputationSlug", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type boltSchedulerServiceProcessorRegisterComputation struct {
	handler BoltSchedulerService
}

func (p *boltSchedulerServiceProcessorRegisterComputation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterComputationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("registerComputation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := RegisterComputationResult{}
	var err2 error
	if result.Success, err2 = p.handler.RegisterComputation(args.Computation); err2 != nil {
		switch v := err2.(type) {
		case *BoltError:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing registerComputation: "+err2.Error())
			oprot.WriteMessageBegin("registerComputation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("registerComputation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type boltSchedulerServiceProcessorScaleComputation struct {
	handler BoltSchedulerService
}

func (p *boltSchedulerServiceProcessorScaleComputation) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ScaleComputationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scaleComputation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ScaleComputationResult{}
	var err2 error
	if err2 = p.handler.ScaleComputation(args.ComputationName, args.Instances); err2 != nil {
		switch v := err2.(type) {
		case *BoltError:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scaleComputation: "+err2.Error())
			oprot.WriteMessageBegin("scaleComputation", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("scaleComputation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type boltSchedulerServiceProcessorKillTask struct {
	handler BoltSchedulerService
}

func (p *boltSchedulerServiceProcessorKillTask) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := KillTaskArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("killTask", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := KillTaskResult{}
	var err2 error
	if err2 = p.handler.KillTask(args.TaskId); err2 != nil {
		switch v := err2.(type) {
		case *BoltError:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing killTask: "+err2.Error())
			oprot.WriteMessageBegin("killTask", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("killTask", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type DeployComputationArgs struct {
	Request *BoltComputationRequest `thrift:"request,1" json:"request"`
}

func NewDeployComputationArgs() *DeployComputationArgs {
	return &DeployComputationArgs{}
}

var DeployComputationArgs_Request_DEFAULT *BoltComputationRequest

func (p *DeployComputationArgs) GetRequest() *BoltComputationRequest {
	if !p.IsSetRequest() {
		return DeployComputationArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *DeployComputationArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DeployComputationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeployComputationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Request = &BoltComputationRequest{
		Instances: 1,

		Cpus: 0.1,

		Mem: 2048,

		Disk: 10240,
	}
	if err := p.Request.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Request, err)
	}
	return nil
}

func (p *DeployComputationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deployComputation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeployComputationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:request: %s", p, err)
	}
	if err := p.Request.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Request, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:request: %s", p, err)
	}
	return err
}

func (p *DeployComputationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeployComputationArgs(%+v)", *p)
}

type DeployComputationResult struct {
	E *BoltError `thrift:"e,1" json:"e"`
}

func NewDeployComputationResult() *DeployComputationResult {
	return &DeployComputationResult{}
}

var DeployComputationResult_E_DEFAULT *BoltError

func (p *DeployComputationResult) GetE() *BoltError {
	if !p.IsSetE() {
		return DeployComputationResult_E_DEFAULT
	}
	return p.E
}
func (p *DeployComputationResult) IsSetE() bool {
	return p.E != nil
}

func (p *DeployComputationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DeployComputationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &BoltError{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *DeployComputationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deployComputation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DeployComputationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *DeployComputationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeployComputationResult(%+v)", *p)
}

type GetComputationSlugArgs struct {
	ComputationName string `thrift:"computationName,1" json:"computationName"`
}

func NewGetComputationSlugArgs() *GetComputationSlugArgs {
	return &GetComputationSlugArgs{}
}

func (p *GetComputationSlugArgs) GetComputationName() string {
	return p.ComputationName
}
func (p *GetComputationSlugArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetComputationSlugArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ComputationName = v
	}
	return nil
}

func (p *GetComputationSlugArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getComputationSlug_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetComputationSlugArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("computationName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:computationName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ComputationName)); err != nil {
		return fmt.Errorf("%T.computationName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:computationName: %s", p, err)
	}
	return err
}

func (p *GetComputationSlugArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetComputationSlugArgs(%+v)", *p)
}

type GetComputationSlugResult struct {
	Success []byte     `thrift:"success,0" json:"success"`
	E       *BoltError `thrift:"e,1" json:"e"`
}

func NewGetComputationSlugResult() *GetComputationSlugResult {
	return &GetComputationSlugResult{}
}

var GetComputationSlugResult_Success_DEFAULT []byte

func (p *GetComputationSlugResult) GetSuccess() []byte {
	return p.Success
}

var GetComputationSlugResult_E_DEFAULT *BoltError

func (p *GetComputationSlugResult) GetE() *BoltError {
	if !p.IsSetE() {
		return GetComputationSlugResult_E_DEFAULT
	}
	return p.E
}
func (p *GetComputationSlugResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetComputationSlugResult) IsSetE() bool {
	return p.E != nil
}

func (p *GetComputationSlugResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetComputationSlugResult) ReadField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 0: %s", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *GetComputationSlugResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &BoltError{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *GetComputationSlugResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getComputationSlug_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetComputationSlugResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return fmt.Errorf("%T.success (0) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *GetComputationSlugResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *GetComputationSlugResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetComputationSlugResult(%+v)", *p)
}

type RegisterComputationArgs struct {
	Computation *ComputationMetadata `thrift:"computation,1" json:"computation"`
}

func NewRegisterComputationArgs() *RegisterComputationArgs {
	return &RegisterComputationArgs{}
}

var RegisterComputationArgs_Computation_DEFAULT *ComputationMetadata

func (p *RegisterComputationArgs) GetComputation() *ComputationMetadata {
	if !p.IsSetComputation() {
		return RegisterComputationArgs_Computation_DEFAULT
	}
	return p.Computation
}
func (p *RegisterComputationArgs) IsSetComputation() bool {
	return p.Computation != nil
}

func (p *RegisterComputationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterComputationArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Computation = &ComputationMetadata{}
	if err := p.Computation.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Computation, err)
	}
	return nil
}

func (p *RegisterComputationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerComputation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterComputationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("computation", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:computation: %s", p, err)
	}
	if err := p.Computation.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Computation, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:computation: %s", p, err)
	}
	return err
}

func (p *RegisterComputationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterComputationArgs(%+v)", *p)
}

type RegisterComputationResult struct {
	Success *TopologyMetadata `thrift:"success,0" json:"success"`
	E       *BoltError        `thrift:"e,1" json:"e"`
}

func NewRegisterComputationResult() *RegisterComputationResult {
	return &RegisterComputationResult{}
}

var RegisterComputationResult_Success_DEFAULT *TopologyMetadata

func (p *RegisterComputationResult) GetSuccess() *TopologyMetadata {
	if !p.IsSetSuccess() {
		return RegisterComputationResult_Success_DEFAULT
	}
	return p.Success
}

var RegisterComputationResult_E_DEFAULT *BoltError

func (p *RegisterComputationResult) GetE() *BoltError {
	if !p.IsSetE() {
		return RegisterComputationResult_E_DEFAULT
	}
	return p.E
}
func (p *RegisterComputationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RegisterComputationResult) IsSetE() bool {
	return p.E != nil
}

func (p *RegisterComputationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.ReadField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterComputationResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = &TopologyMetadata{}
	if err := p.Success.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Success, err)
	}
	return nil
}

func (p *RegisterComputationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &BoltError{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *RegisterComputationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerComputation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterComputationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return fmt.Errorf("%T write field begin error 0:success: %s", p, err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Success, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 0:success: %s", p, err)
		}
	}
	return err
}

func (p *RegisterComputationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *RegisterComputationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterComputationResult(%+v)", *p)
}

type ScaleComputationArgs struct {
	ComputationName string `thrift:"computationName,1" json:"computationName"`
	Instances       int64  `thrift:"instances,2" json:"instances"`
}

func NewScaleComputationArgs() *ScaleComputationArgs {
	return &ScaleComputationArgs{}
}

func (p *ScaleComputationArgs) GetComputationName() string {
	return p.ComputationName
}

func (p *ScaleComputationArgs) GetInstances() int64 {
	return p.Instances
}
func (p *ScaleComputationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ScaleComputationArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.ComputationName = v
	}
	return nil
}

func (p *ScaleComputationArgs) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Instances = v
	}
	return nil
}

func (p *ScaleComputationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scaleComputation_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ScaleComputationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("computationName", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:computationName: %s", p, err)
	}
	if err := oprot.WriteString(string(p.ComputationName)); err != nil {
		return fmt.Errorf("%T.computationName (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:computationName: %s", p, err)
	}
	return err
}

func (p *ScaleComputationArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("instances", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:instances: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Instances)); err != nil {
		return fmt.Errorf("%T.instances (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:instances: %s", p, err)
	}
	return err
}

func (p *ScaleComputationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScaleComputationArgs(%+v)", *p)
}

type ScaleComputationResult struct {
	E *BoltError `thrift:"e,1" json:"e"`
}

func NewScaleComputationResult() *ScaleComputationResult {
	return &ScaleComputationResult{}
}

var ScaleComputationResult_E_DEFAULT *BoltError

func (p *ScaleComputationResult) GetE() *BoltError {
	if !p.IsSetE() {
		return ScaleComputationResult_E_DEFAULT
	}
	return p.E
}
func (p *ScaleComputationResult) IsSetE() bool {
	return p.E != nil
}

func (p *ScaleComputationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ScaleComputationResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &BoltError{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *ScaleComputationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("scaleComputation_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *ScaleComputationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *ScaleComputationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScaleComputationResult(%+v)", *p)
}

type KillTaskArgs struct {
	TaskId string `thrift:"taskId,1" json:"taskId"`
}

func NewKillTaskArgs() *KillTaskArgs {
	return &KillTaskArgs{}
}

func (p *KillTaskArgs) GetTaskId() string {
	return p.TaskId
}
func (p *KillTaskArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *KillTaskArgs) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.TaskId = v
	}
	return nil
}

func (p *KillTaskArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("killTask_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *KillTaskArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("taskId", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:taskId: %s", p, err)
	}
	if err := oprot.WriteString(string(p.TaskId)); err != nil {
		return fmt.Errorf("%T.taskId (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:taskId: %s", p, err)
	}
	return err
}

func (p *KillTaskArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KillTaskArgs(%+v)", *p)
}

type KillTaskResult struct {
	E *BoltError `thrift:"e,1" json:"e"`
}

func NewKillTaskResult() *KillTaskResult {
	return &KillTaskResult{}
}

var KillTaskResult_E_DEFAULT *BoltError

func (p *KillTaskResult) GetE() *BoltError {
	if !p.IsSetE() {
		return KillTaskResult_E_DEFAULT
	}
	return p.E
}
func (p *KillTaskResult) IsSetE() bool {
	return p.E != nil
}

func (p *KillTaskResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *KillTaskResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &BoltError{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *KillTaskResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("killTask_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *KillTaskResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *KillTaskResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KillTaskResult(%+v)", *p)
}
