// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package bolt

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type BoltProxyService interface {
	MutableEphemeralStateService

	// Parameters:
	//  - Topology
	UpdateTopology(topology *TopologyMetadata) (err error)
	// Parameters:
	//  - E
	UpdateSchedulerAddress(e *Endpoint) (err error)
	// Parameters:
	//  - Meta
	RegisterWithScheduler(meta *ComputationMetadata) (err error)
}

type BoltProxyServiceClient struct {
	*MutableEphemeralStateServiceClient
}

func NewBoltProxyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BoltProxyServiceClient {
	return &BoltProxyServiceClient{MutableEphemeralStateServiceClient: NewMutableEphemeralStateServiceClientFactory(t, f)}
}

func NewBoltProxyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BoltProxyServiceClient {
	return &BoltProxyServiceClient{MutableEphemeralStateServiceClient: NewMutableEphemeralStateServiceClientProtocol(t, iprot, oprot)}
}

// Parameters:
//  - Topology
func (p *BoltProxyServiceClient) UpdateTopology(topology *TopologyMetadata) (err error) {
	if err = p.sendUpdateTopology(topology); err != nil {
		return
	}
	return p.recvUpdateTopology()
}

func (p *BoltProxyServiceClient) sendUpdateTopology(topology *TopologyMetadata) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateTopology", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateTopologyArgs{
		Topology: topology,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BoltProxyServiceClient) recvUpdateTopology() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error53 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error54 error
		error54, err = error53.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error54
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateTopology failed: out of sequence response")
		return
	}
	result := UpdateTopologyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - E
func (p *BoltProxyServiceClient) UpdateSchedulerAddress(e *Endpoint) (err error) {
	if err = p.sendUpdateSchedulerAddress(e); err != nil {
		return
	}
	return p.recvUpdateSchedulerAddress()
}

func (p *BoltProxyServiceClient) sendUpdateSchedulerAddress(e *Endpoint) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateSchedulerAddress", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := UpdateSchedulerAddressArgs{
		E: e,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *BoltProxyServiceClient) recvUpdateSchedulerAddress() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error55 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error56 error
		error56, err = error55.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error56
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateSchedulerAddress failed: out of sequence response")
		return
	}
	result := UpdateSchedulerAddressResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.E != nil {
		err = result.E
		return
	}
	return
}

// Parameters:
//  - Meta
func (p *BoltProxyServiceClient) RegisterWithScheduler(meta *ComputationMetadata) (err error) {
	if err = p.sendRegisterWithScheduler(meta); err != nil {
		return
	}
	return
}

func (p *BoltProxyServiceClient) sendRegisterWithScheduler(meta *ComputationMetadata) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("registerWithScheduler", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := RegisterWithSchedulerArgs{
		Meta: meta,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

type BoltProxyServiceProcessor struct {
	*MutableEphemeralStateServiceProcessor
}

func NewBoltProxyServiceProcessor(handler BoltProxyService) *BoltProxyServiceProcessor {
	self57 := &BoltProxyServiceProcessor{NewMutableEphemeralStateServiceProcessor(handler)}
	self57.AddToProcessorMap("updateTopology", &boltProxyServiceProcessorUpdateTopology{handler: handler})
	self57.AddToProcessorMap("updateSchedulerAddress", &boltProxyServiceProcessorUpdateSchedulerAddress{handler: handler})
	self57.AddToProcessorMap("registerWithScheduler", &boltProxyServiceProcessorRegisterWithScheduler{handler: handler})
	return self57
}

type boltProxyServiceProcessorUpdateTopology struct {
	handler BoltProxyService
}

func (p *boltProxyServiceProcessorUpdateTopology) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateTopologyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateTopology", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateTopologyResult{}
	var err2 error
	if err2 = p.handler.UpdateTopology(args.Topology); err2 != nil {
		switch v := err2.(type) {
		case *BoltError:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateTopology: "+err2.Error())
			oprot.WriteMessageBegin("updateTopology", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateTopology", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type boltProxyServiceProcessorUpdateSchedulerAddress struct {
	handler BoltProxyService
}

func (p *boltProxyServiceProcessorUpdateSchedulerAddress) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := UpdateSchedulerAddressArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateSchedulerAddress", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := UpdateSchedulerAddressResult{}
	var err2 error
	if err2 = p.handler.UpdateSchedulerAddress(args.E); err2 != nil {
		switch v := err2.(type) {
		case *BoltError:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSchedulerAddress: "+err2.Error())
			oprot.WriteMessageBegin("updateSchedulerAddress", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateSchedulerAddress", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type boltProxyServiceProcessorRegisterWithScheduler struct {
	handler BoltProxyService
}

func (p *boltProxyServiceProcessorRegisterWithScheduler) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := RegisterWithSchedulerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.RegisterWithScheduler(args.Meta); err2 != nil {
		return true, err2
	}
	return true, nil
}

// HELPER FUNCTIONS AND STRUCTURES

type UpdateTopologyArgs struct {
	Topology *TopologyMetadata `thrift:"topology,1" json:"topology"`
}

func NewUpdateTopologyArgs() *UpdateTopologyArgs {
	return &UpdateTopologyArgs{}
}

var UpdateTopologyArgs_Topology_DEFAULT *TopologyMetadata

func (p *UpdateTopologyArgs) GetTopology() *TopologyMetadata {
	if !p.IsSetTopology() {
		return UpdateTopologyArgs_Topology_DEFAULT
	}
	return p.Topology
}
func (p *UpdateTopologyArgs) IsSetTopology() bool {
	return p.Topology != nil
}

func (p *UpdateTopologyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateTopologyArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Topology = &TopologyMetadata{}
	if err := p.Topology.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Topology, err)
	}
	return nil
}

func (p *UpdateTopologyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateTopology_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateTopologyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("topology", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:topology: %s", p, err)
	}
	if err := p.Topology.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Topology, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:topology: %s", p, err)
	}
	return err
}

func (p *UpdateTopologyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTopologyArgs(%+v)", *p)
}

type UpdateTopologyResult struct {
	E *BoltError `thrift:"e,1" json:"e"`
}

func NewUpdateTopologyResult() *UpdateTopologyResult {
	return &UpdateTopologyResult{}
}

var UpdateTopologyResult_E_DEFAULT *BoltError

func (p *UpdateTopologyResult) GetE() *BoltError {
	if !p.IsSetE() {
		return UpdateTopologyResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateTopologyResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateTopologyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateTopologyResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &BoltError{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateTopologyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateTopology_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateTopologyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateTopologyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTopologyResult(%+v)", *p)
}

type UpdateSchedulerAddressArgs struct {
	E *Endpoint `thrift:"e,1" json:"e"`
}

func NewUpdateSchedulerAddressArgs() *UpdateSchedulerAddressArgs {
	return &UpdateSchedulerAddressArgs{}
}

var UpdateSchedulerAddressArgs_E_DEFAULT *Endpoint

func (p *UpdateSchedulerAddressArgs) GetE() *Endpoint {
	if !p.IsSetE() {
		return UpdateSchedulerAddressArgs_E_DEFAULT
	}
	return p.E
}
func (p *UpdateSchedulerAddressArgs) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateSchedulerAddressArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSchedulerAddressArgs) ReadField1(iprot thrift.TProtocol) error {
	p.E = &Endpoint{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateSchedulerAddressArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSchedulerAddress_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSchedulerAddressArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
	}
	if err := p.E.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.E, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:e: %s", p, err)
	}
	return err
}

func (p *UpdateSchedulerAddressArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSchedulerAddressArgs(%+v)", *p)
}

type UpdateSchedulerAddressResult struct {
	E *BoltError `thrift:"e,1" json:"e"`
}

func NewUpdateSchedulerAddressResult() *UpdateSchedulerAddressResult {
	return &UpdateSchedulerAddressResult{}
}

var UpdateSchedulerAddressResult_E_DEFAULT *BoltError

func (p *UpdateSchedulerAddressResult) GetE() *BoltError {
	if !p.IsSetE() {
		return UpdateSchedulerAddressResult_E_DEFAULT
	}
	return p.E
}
func (p *UpdateSchedulerAddressResult) IsSetE() bool {
	return p.E != nil
}

func (p *UpdateSchedulerAddressResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateSchedulerAddressResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = &BoltError{}
	if err := p.E.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.E, err)
	}
	return nil
}

func (p *UpdateSchedulerAddressResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateSchedulerAddress_result"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateSchedulerAddressResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err := oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:e: %s", p, err)
		}
		if err := p.E.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.E, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:e: %s", p, err)
		}
	}
	return err
}

func (p *UpdateSchedulerAddressResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateSchedulerAddressResult(%+v)", *p)
}

type RegisterWithSchedulerArgs struct {
	Meta *ComputationMetadata `thrift:"meta,1" json:"meta"`
}

func NewRegisterWithSchedulerArgs() *RegisterWithSchedulerArgs {
	return &RegisterWithSchedulerArgs{}
}

var RegisterWithSchedulerArgs_Meta_DEFAULT *ComputationMetadata

func (p *RegisterWithSchedulerArgs) GetMeta() *ComputationMetadata {
	if !p.IsSetMeta() {
		return RegisterWithSchedulerArgs_Meta_DEFAULT
	}
	return p.Meta
}
func (p *RegisterWithSchedulerArgs) IsSetMeta() bool {
	return p.Meta != nil
}

func (p *RegisterWithSchedulerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *RegisterWithSchedulerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Meta = &ComputationMetadata{}
	if err := p.Meta.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Meta, err)
	}
	return nil
}

func (p *RegisterWithSchedulerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("registerWithScheduler_args"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *RegisterWithSchedulerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("meta", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:meta: %s", p, err)
	}
	if err := p.Meta.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Meta, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:meta: %s", p, err)
	}
	return err
}

func (p *RegisterWithSchedulerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterWithSchedulerArgs(%+v)", *p)
}
